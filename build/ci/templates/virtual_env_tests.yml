parameters:
  name: 'VirtualEnv_Tests_Windows_py37'
  NodeVersion: '8.11.2'
  NpmVersion: 'latest'
  AzureStorageAccountName: 'vscodepythonci'
  AzureStorageContainerName: 'vscode-python-ci'
  PoolName: 'Hosted VS2017'
  EnvironmentExecutableFolder: 'Scripts'
  ENV_PATHS_LOCATION: './src/tmp/envPaths.json'
  TEST_FILES_SUFFIX: 'testvirtualenvs'
  TestSuiteName: 'testSingleWorkspace'

jobs:
- job: ${{ parameters.name }}
  dependsOn: 'PR_Validate_Windows_py37'
  pool:
    name: ${{ parameters.PoolName }}

  variables:
    # TODO: use {{ insert }}: {{ parameters.variables }}, it would not work at time I wrote this
    nodeVersion: ${{ parameters.NodeVersion }}
    npmVersion: ${{ parameters.NpmVersion }}
    pythonVersion: ${{ parameters.PythonVersion }}
    azureStorageAcctName: ${{ parameters.AzureStorageAccountName }}
    azureStorageContainerName: ${{ parameters.AzureStorageContainerName }}
    environmentExecutableFolder: ${{ parameters.EnvironmentExecutableFolder }}
    ENV_PATHS_LOCATION: ${{ parameters.ENV_PATHS_LOCATION }}
    TEST_FILES_SUFFIX: ${{ parameters.TEST_FILES_SUFFIX }}
    TestSuiteName: ${{ parameters.TestSuiteName }}

  steps:
    - bash: echo REQUESTED VARIABLE VALUES

        echo Node Version = $(nodeVersion)

        echo Python Version = $(pythonVersion)

        echo NPM Version = $(npmVersion)

        echo Mocha reportfile = '$(mochaReportFile)'

        echo MOCHA_CI_REPORTFILE = $MOCHA_CI_REPORTFILE

        echo MOCHA_CI_REPORTER_ID = $MOCHA_CI_REPORTER_ID

        echo MOCHA_REPORTER_JUNIT = $MOCHA_REPORTER_JUNIT

        echo COV_UUID = $COV_UUID

        echo Run Hygiene = $(runHygiene)

      displayName: 'Show build vars'
      name: 'show_bld_vars'


    - powershell: |
        New-Item -ItemType directory -Path "$(System.ArtifactsDirectory)/bin-artifacts"

        $buildArtifactUri = "https://$(azureStorageAcctName).blob.core.windows.net/$(azureStorageContainerName)/$(Build.BuildNumber)/bin-artifacts.zip"
        Write-Verbose "Downloading from $buildArtifactUri"

        $destination = "$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip"
        Write-Verbose "Destination file: $destination"

        Invoke-WebRequest -Uri $buildArtifactUri -OutFile $destination -Verbose

      displayName: 'Download bin-artifacts from cloud-storage'


    - task: ExtractFiles@1
      displayName: 'Splat bin-artifacts'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip'

        destinationFolder: '$(Build.SourcesDirectory)'

        cleanDestinationFolder: false


    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7


    - bash: |
       pip install pipenv

       pipenv run python ./build/ci/addEnvPath.py $(ENV_PATHS_LOCATION) pipenvPath

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Create pipenv environment'


    - bash: |
       python -m venv .venv

       .venv/$(environmentExecutableFolder)/python ./build/ci/addEnvPath.py $(ENV_PATHS_LOCATION) venvPath

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Create venv environment'


    - bash: |
       pip install virtualenv

       python -m virtualenv .virtualenv

       .virtualenv/$(environmentExecutableFolder)/python ./build/ci/addEnvPath.py $(ENV_PATHS_LOCATION) virtualEnvPath

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Create virtualenv environment'


    - bash: |
       echo $(CONDA)

       C:/Miniconda/python ./build/ci/addEnvPath.py $(ENV_PATHS_LOCATION) condaPath

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Save conda environment executable'


    - task: Npm@1
      displayName: 'update npm'
      inputs:
        command: custom

        verbose: true

        customCommand: 'install -g npm@$(NpmVersion)'


    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom

        verbose: true

        customCommand: ci


    - task: Npm@1
      displayName: 'run $(TestSuiteName)'
      inputs:
        command: custom

        verbose: true

        customCommand: 'run $(TestSuiteName)'


